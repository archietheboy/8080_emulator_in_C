(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    190110,       4147]
NotebookOptionsPosition[    188255,       4109]
NotebookOutlinePosition[    188621,       4125]
CellTagsIndexPosition[    188578,       4122]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"StringRiffle", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"\"\<\\t\\t\>\"", ",", "\"\<case \>\"", ",", "\"\<0x\>\"", ",", 
        RowBox[{"IntegerString", "[", 
         RowBox[{"#", ",", "16", ",", "2"}], "]"}], ",", "\"\<: \>\"", ",", 
        "\"\<// \>\"", ",", 
        RowBox[{"IntegerString", "[", 
         RowBox[{"#", ",", "2", ",", "8"}], "]"}], ",", 
        "\[IndentingNewLine]", "\"\<\\n\\t\\t\\t\\t\>\"", ",", 
        "\"\<printf(\\\"\\\");\>\"", ",", "\"\<\\n\\t\\t\\t\\t\>\"", ",", 
        "\"\<break;\>\""}], "\[IndentingNewLine]", "}"}], "]"}], "&"}], "/@", 
    
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "255"}], "]"}]}], ",", "\"\<\\n\>\""}], "]"}]], "Input",\

 CellChangeTimes->{{3.785432497235849*^9, 3.785432515261365*^9}, {
  3.785432600982691*^9, 3.785432792889727*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"fc6ff9ce-51e3-4537-8110-c903f790af52"],

Cell[BoxData["\<\"\\t\\tcase 0x00: // \
00000000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x01: // 00000001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x02: // \
00000010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x03: // 00000011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x04: // \
00000100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x05: // 00000101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x06: // \
00000110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x07: // 00000111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x08: // \
00001000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x09: // 00001001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x0a: // \
00001010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x0b: // 00001011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x0c: // \
00001100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x0d: // 00001101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x0e: // \
00001110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x0f: // 00001111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x10: // \
00010000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x11: // 00010001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x12: // \
00010010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x13: // 00010011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x14: // \
00010100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x15: // 00010101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x16: // \
00010110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x17: // 00010111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x18: // \
00011000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x19: // 00011001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x1a: // \
00011010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x1b: // 00011011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x1c: // \
00011100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x1d: // 00011101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x1e: // \
00011110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x1f: // 00011111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x20: // \
00100000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x21: // 00100001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x22: // \
00100010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x23: // 00100011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x24: // \
00100100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x25: // 00100101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x26: // \
00100110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x27: // 00100111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x28: // \
00101000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x29: // 00101001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x2a: // \
00101010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x2b: // 00101011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x2c: // \
00101100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x2d: // 00101101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x2e: // \
00101110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x2f: // 00101111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x30: // \
00110000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x31: // 00110001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x32: // \
00110010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x33: // 00110011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x34: // \
00110100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x35: // 00110101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x36: // \
00110110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x37: // 00110111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x38: // \
00111000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x39: // 00111001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x3a: // \
00111010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x3b: // 00111011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x3c: // \
00111100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x3d: // 00111101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x3e: // \
00111110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x3f: // 00111111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x40: // \
01000000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x41: // 01000001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x42: // \
01000010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x43: // 01000011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x44: // \
01000100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x45: // 01000101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x46: // \
01000110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x47: // 01000111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x48: // \
01001000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x49: // 01001001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x4a: // \
01001010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x4b: // 01001011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x4c: // \
01001100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x4d: // 01001101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x4e: // \
01001110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x4f: // 01001111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x50: // \
01010000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x51: // 01010001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x52: // \
01010010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x53: // 01010011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x54: // \
01010100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x55: // 01010101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x56: // \
01010110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x57: // 01010111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x58: // \
01011000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x59: // 01011001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x5a: // \
01011010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x5b: // 01011011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x5c: // \
01011100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x5d: // 01011101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x5e: // \
01011110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x5f: // 01011111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x60: // \
01100000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x61: // 01100001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x62: // \
01100010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x63: // 01100011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x64: // \
01100100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x65: // 01100101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x66: // \
01100110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x67: // 01100111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x68: // \
01101000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x69: // 01101001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x6a: // \
01101010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x6b: // 01101011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x6c: // \
01101100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x6d: // 01101101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x6e: // \
01101110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x6f: // 01101111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x70: // \
01110000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x71: // 01110001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x72: // \
01110010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x73: // 01110011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x74: // \
01110100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x75: // 01110101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x76: // \
01110110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x77: // 01110111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x78: // \
01111000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x79: // 01111001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x7a: // \
01111010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x7b: // 01111011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x7c: // \
01111100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x7d: // 01111101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x7e: // \
01111110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x7f: // 01111111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x80: // \
10000000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x81: // 10000001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x82: // \
10000010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x83: // 10000011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x84: // \
10000100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x85: // 10000101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x86: // \
10000110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x87: // 10000111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x88: // \
10001000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x89: // 10001001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x8a: // \
10001010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x8b: // 10001011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x8c: // \
10001100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x8d: // 10001101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x8e: // \
10001110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x8f: // 10001111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x90: // \
10010000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x91: // 10010001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x92: // \
10010010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x93: // 10010011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x94: // \
10010100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x95: // 10010101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x96: // \
10010110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x97: // 10010111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x98: // \
10011000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x99: // 10011001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x9a: // \
10011010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x9b: // 10011011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x9c: // \
10011100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x9d: // 10011101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0x9e: // \
10011110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0x9f: // 10011111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xa0: // \
10100000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xa1: // 10100001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xa2: // \
10100010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xa3: // 10100011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xa4: // \
10100100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xa5: // 10100101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xa6: // \
10100110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xa7: // 10100111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xa8: // \
10101000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xa9: // 10101001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xaa: // \
10101010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xab: // 10101011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xac: // \
10101100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xad: // 10101101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xae: // \
10101110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xaf: // 10101111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xb0: // \
10110000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xb1: // 10110001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xb2: // \
10110010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xb3: // 10110011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xb4: // \
10110100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xb5: // 10110101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xb6: // \
10110110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xb7: // 10110111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xb8: // \
10111000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xb9: // 10111001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xba: // \
10111010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xbb: // 10111011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xbc: // \
10111100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xbd: // 10111101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xbe: // \
10111110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xbf: // 10111111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc0: // \
11000000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xc1: // 11000001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc2: // \
11000010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xc3: // 11000011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc4: // \
11000100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xc5: // 11000101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc6: // \
11000110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xc7: // 11000111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc8: // \
11001000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xc9: // 11001001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xca: // \
11001010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xcb: // 11001011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xcc: // \
11001100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xcd: // 11001101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xce: // \
11001110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xcf: // 11001111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xd0: // \
11010000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xd1: // 11010001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xd2: // \
11010010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xd3: // 11010011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xd4: // \
11010100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xd5: // 11010101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xd6: // \
11010110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xd7: // 11010111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xd8: // \
11011000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xd9: // 11011001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xda: // \
11011010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xdb: // 11011011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xdc: // \
11011100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xdd: // 11011101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xde: // \
11011110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xdf: // 11011111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe0: // \
11100000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xe1: // 11100001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe2: // \
11100010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xe3: // 11100011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe4: // \
11100100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xe5: // 11100101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe6: // \
11100110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xe7: // 11100111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe8: // \
11101000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xe9: // 11101001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xea: // \
11101010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xeb: // 11101011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xec: // \
11101100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xed: // 11101101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xee: // \
11101110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xef: // 11101111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf0: // \
11110000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xf1: // 11110001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf2: // \
11110010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xf3: // 11110011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf4: // \
11110100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xf5: // 11110101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf6: // \
11110110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xf7: // 11110111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf8: // \
11111000\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xf9: // 11111001\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xfa: // \
11111010\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xfb: // 11111011\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xfc: // \
11111100\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xfd: // 11111101\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\\
tcase 0xfe: // \
11111110\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\tcase \
0xff: // 11111111\\n\\t\\t\\t\\tprintf(\\\"\\\");\\n\\t\\t\\t\\tbreak;\"\>"], \
"Output",
 CellChangeTimes->{{3.785432511112194*^9, 3.785432515536117*^9}, {
  3.785432605993134*^9, 3.7854326766823397`*^9}, {3.785432715594976*^9, 
  3.785432729673711*^9}, {3.785432765233364*^9, 3.785432793214764*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"46609712-b4cf-4657-9923-ed981f1e67f5"]
}, Closed]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"register", "=", 
   RowBox[{"<|", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "0", "]"}], "=", "\"\<B\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "1", "]"}], "=", "\"\<C\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "2", "]"}], "=", "\"\<D\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "3", "]"}], "=", "\"\<E\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "4", "]"}], "=", "\"\<H\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "5", "]"}], "=", "\"\<L\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "6", "]"}], "=", "\"\<M\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"register", "[", "7", "]"}], "=", "\"\<A\>\""}], ";"}]}], "Input",
 CellChangeTimes->{{3.785432861534849*^9, 3.785432931945039*^9}, {
  3.78543301686198*^9, 3.785433044858302*^9}},
 Background->GrayLevel[0.85],
 CellLabel->"In[1]:=",ExpressionUUID->"cdb41e9b-91e2-4c62-bfcd-22d0c63c67f5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"registerpair", "=", 
   RowBox[{"<|", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"registerpair", "[", "0", "]"}], "=", "\"\<B\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"registerpair", "[", "1", "]"}], "=", "\"\<D\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"registerpair", "[", "2", "]"}], "=", "\"\<H\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"registerpair", "[", "3", "]"}], "=", "\"\<SP\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.785432861534849*^9, 3.785432931945039*^9}, {
  3.78543301686198*^9, 3.785433086575696*^9}},
 Background->GrayLevel[0.85],
 CellLabel->"In[10]:=",ExpressionUUID->"3a196786-83bf-44af-b936-a12e21cdc1d6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"condition", "=", 
   RowBox[{"<|", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "0", "]"}], "=", "\"\<NZ\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "1", "]"}], "=", "\"\<Z\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "2", "]"}], "=", "\"\<NC\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "3", "]"}], "=", "\"\<C\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "4", "]"}], "=", "\"\<PO\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "5", "]"}], "=", "\"\<PE\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "6", "]"}], "=", "\"\<P\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condition", "[", "7", "]"}], "=", "\"\<M\>\""}], ";"}]}], "Input",\

 CellChangeTimes->{{3.785432861534849*^9, 3.785432931945039*^9}, {
  3.78543301686198*^9, 3.785433086575696*^9}, {3.78544924874284*^9, 
  3.785449309312151*^9}},
 Background->GrayLevel[0.85],
 CellLabel->"In[15]:=",ExpressionUUID->"d0f225eb-44fd-4a6e-a097-5b64091d9d86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"register", "[", 
  RowBox[{"FromDigits", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", "2"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7854334602978888`*^9, 3.785433477487732*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"284d256e-2c2f-4f3b-94b4-07f13e82a282"],

Cell[BoxData["\<\"A\"\>"], "Output",
 CellChangeTimes->{{3.7854334669268017`*^9, 3.785433477866044*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"30a570b0-1a52-49e2-9421-e82f5771c7dd"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"Clear", "[", "instruction", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "d1_", ",", "d2_", ",", "d3_", ",", "s1_", ",", 
      "s2_", ",", "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(r1) <- (r2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<MOV r1,r2\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"MOV    `1`,`2`\\\");\>\"", 
        "]"}], "[", 
       RowBox[{
        RowBox[{"register", "[", 
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}], 
         "]"}], ",", 
        RowBox[{"register", "[", 
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
         "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "d1", ",", "d2", ",", "d3", ",", "s1", ",", "s2", ",", "s3"}], 
           "}"}], ",", "2"}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "d1_", ",", "d2_", ",", "d3_", ",", "1", ",", "1", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(r) <- ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move from memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<MOV r,M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"MOV    `1`,M\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((H)(L)) <- (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move to memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<MOV M,r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"MOV    M,`1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "d1_", ",", "d2_", ",", "d3_", ",", "1", ",", "1", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(r) <- (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<MVI r,data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"MVI    `1`,#0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((H)(L)) <- (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move to memory immediate\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<MVI M,data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"MVI    M,#0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"5", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "r_", ",", "p_", ",", "0", ",", "0", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<(rh) <- (byte3)\>\"", ",", "\"\<(rl) <- (byte2)\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Load register pair immediate\>\""}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<LXI rp,data 16\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"LXI    `1`,#0x%02x%02x\\\", code[2], code[1]);\>\"", 
        "]"}], "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"6", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- ((byte3)(byte2))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Load accumulator direct\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<LDA addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"LDA    #$%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"7", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((byte3)(byte2)) <- (A)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Store accumulator direct\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<STA addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"STA    #$%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"8", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(L) <- ((byte3)(byte2))\>\"", ",", 
        "\"\<(H) <- ((byte3)(byte2) + 1)\>\""}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Load H and L direct\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<LHLD addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"LHLD   #$%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"9", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<((byte3)(byte2)) <- (L)\>\"", ",", 
        "\"\<((byte3)(byte2) + 1) <- (H)\>\""}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Store H and L direct\>\""}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SHLD addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"SHLD   #$%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"10", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}]}], "\[IndentingNewLine]", 
    "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "r_", ",", "p_", ",", "1", ",", "0", ",", "1", ",", 
       "0"}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"r", ",", "p"}], "}"}]}], "]"}]}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- ((rp))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Load accumulator indirect\>\""}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<LDAX rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"LDAX   `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"11", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "r_", ",", "p_", ",", "0", ",", "0", ",", "1", ",", 
       "0"}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"r", ",", "p"}], "}"}]}], "]"}]}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((rp)) <- (A)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Store accumulator indirect\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<STAX rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"STAX   `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"12", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
       "1"}], "}"}], "]"}], ":=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<function\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<(H) <-> (D)\>\"", ",", "\"\<(L) <-> (E)\>\""}], "}"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<name\>\"", "\[Rule]", "\"\<Exchange H and L with D and E\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<XCHG\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<print\>\"", "\[Rule]", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<printf(\\\"XCHG\\\");\>\"", "]"}],
         "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<sort\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"13", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Arithmetic", " ", "Group"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ADD r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ADD    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"14", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ADD M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ADD    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"15", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ADI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"ADI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"16", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + (r) + (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add register with carry\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ADC r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ADC    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"17", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + ((H)(L)) + (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add memory with carry\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ADC M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ADC    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"18", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) + (byte2) + (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Add immediate with carry\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ACI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"ACI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"19", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Subtract register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SUB r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"SUB    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"20", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Subtract memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SUB M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"SUB    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"21", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Subtract immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SUI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"SUI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"22", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - (r) - (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Subtract register with borrow\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SBB r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"SBB    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"23", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - ((H)(L)) - (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Subtract memory with borrow\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SBB M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"SBB    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"24", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) - (byte2) - (CY)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Subtract immediate with borrow\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SBI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"SBI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"25", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "d1_", ",", "d2_", ",", "d3_", ",", "1", ",", "0", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(r) <- (r) + 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<AC\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Increment register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<INR r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"INR    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"26", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((H)(L)) <- ((H)(L)) + 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<AC\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Increment memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<INR M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"INR    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"27", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "d1_", ",", "d2_", ",", "d3_", ",", "1", ",", "0", 
      ",", "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(r) <- (r) - 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<AC\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Decrement register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DCR r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"DCR    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"28", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<((H)(L)) <- ((H)(L)) - 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<AC\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Decrement memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DCR M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"DCR    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"29", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "r_", ",", "p_", ",", "0", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(rh)(rl) <- (rh)(rl) + 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Increment register pair\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<INX rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"INX    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"30", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "r_", ",", "p_", ",", "1", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(rh)(rl) <- (rh)(rl) - 1\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Decrement register pair\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DCX rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"DCX    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"31", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "r_", ",", "p_", ",", "1", ",", "0", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(H)(L) <- (H)(L) + (rh)(rl)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Add register pair to H and L\>\""}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DAD rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"DAD    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"32", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
       "1"}], "}"}], "]"}], ":=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<flags\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
         ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<note\>\"", "->", 
       "\"\<\\n\\t\\t\\t\\t\\t\\tThe eight-bit number in the accumulator is \
adjusted to form two four-bit Binary-Coded-Decimal digits by the following \
process:\\n\\t\\t\\t\\t\\t\\t\\t1. If the value of the least significant 4 \
bits of the accumulator is greater than 9 or if the AC flag is set, 6 is \
added to the accumulator.\\n\\t\\t\\t\\t\\t\\t\\t2. If the value of the most \
4 bits of the accumulator is now greater than 9, or if the CY flag is set, 6 \
is added to the most significant 4 bits of the accumulator.\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "\"\<name\>\"", "\[Rule]", "\"\<Decimal adjust accumulator\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DAA\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<print\>\"", "\[Rule]", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<printf(\\\"DAA\\\");\>\"", "]"}], 
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<sort\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"33", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"LOGICAL", " ", "GROUP"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) & (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<AND register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<note\>\"", "->", "\"\<The CY flag is cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ANA r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ANA    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"34", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) & ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<AND memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<note\>\"", "->", "\"\<The CY flag is cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ANA M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ANA    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"35", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) & (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<AND immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ANI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"ANI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"36", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) XOR (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Exclusive OR register\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<XRA r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"XRA    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"37", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) XOR ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Exclusive OR memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<XRA M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"XRA    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"38", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) XOR (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Exclusive OR immediate\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<XRI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"XRI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"39", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) OR (r)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<OR register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ORA r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ORA    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"40", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) OR ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<OR memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ORA M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"ORA    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"41", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (A) OR (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<OR immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", "\"\<The CY and AC flags are cleared.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<ORI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"ORI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"42", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "s1_", ",", "s2_", ",",
       "s3_"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) - (r)\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Compare register\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", 
      "\"\<The Z flag is set to 1 if (A) = (r). The CY flag is set to 1 if \
(A) < (r).\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CMP r\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"CMP    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"register", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"43", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2", ",", "s3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) - ((H)(L))\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Compare memory\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", 
      "\"\<The Z flag is set to 1 if (A) = ((H)(L)). The CY flag is set to 1 \
if (A) < ((H)(L)).\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CMP M\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"CMP    M\\\");\>\"", "]"}], "[",
        "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"44", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) - (byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Compare immediate\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "->", 
      "\"\<The Z flag is set to 1 if (A) = (byte2). The CY flag is set to 1 \
if (A) < (byte2).\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CPI data\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"CPI    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"45", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(A[n+1]) <- (A[n]); (A[0]) <- (A[7])\>\"", ",", 
        "\"\<(CY) <- (A[7])\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Rotate left\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RLC\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"RLC\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"46", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(A[n]) <- (A[n+1]); (A[7]) <- (A[0])\>\"", ",", 
        "\"\<(CY) <- (A[0])\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Rotate right\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RRC\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"RRC\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"47", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(A[n+1]) <- (A[n]); (CY) <- (A[7])\>\"", ",", 
        "\"\<(A[0]) <- (CY)\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Rotate left through carry\>\""}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RAL\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"RAL\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"48", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(A[n]) <- (A[n+1]); (CY) <- (A[0])\>\"", ",", 
        "\"\<(A[7]) <- (CY)\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flags\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Rotate right through carry\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RAR\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"RAR\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"49", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (_A_)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Complement accumulator\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CMA\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"CMA\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"50", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(CY) <- (_CY_)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<flag\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Complement carry\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CMC\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"CMC\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"51", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
       "1"}], "}"}], "]"}], ":=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<function\>\"", "\[Rule]", 
       RowBox[{"{", "\"\<(CY) <- 1\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"\"\<flag\>\"", "\[Rule]", 
       RowBox[{"{", "\"\<CY\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Set carry\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<STC\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<print\>\"", "\[Rule]", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<printf(\\\"STC\\\");\>\"", "]"}], 
        "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<sort\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"52", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"BRANCH", " ", "GROUP"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(PC) <- (byte3)(byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Jump\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<JMP addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"JMP    $%02x%02x\\\", code[2], code[1]);\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"53", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "c1_", ",", "c2_", ",", "c3_", ",", "0", ",", "1", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<If (CCC), (PC) <- (byte3)(byte2)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Conditional jump\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<Jcondition addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"J`1`    $%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", 
       RowBox[{"condition", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"54", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<((SP) - 1) <- (PCH)\>\"", ",", "\"\<((SP) - 2) <- (PCL)\>\"", 
        ",", "\"\<(SP) <- (SP) - 2\>\"", ",", 
        "\"\<(PC) <- (byte3)(byte2)\>\""}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Call\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<CALL addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"CALL   $%02x%02x\\\", code[2], code[1]);\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"55", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "c1_", ",", "c2_", ",", "c3_", ",", "1", ",", "0", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<If (CCC), \>\"", ",", "\"\<((SP) - 1) <- (PCH)\>\"", ",", 
        "\"\<((SP) - 2) <- (PCL)\>\"", ",", "\"\<(SP) <- (SP) - 2\>\"", ",", 
        "\"\<(PC) <- (byte3)(byte2)\>\""}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Conditional call\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<Ccondition addr\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"C`1`    $%02x%02x\\\", code[2], code[1]);\>\"", "]"}],
        "[", 
       RowBox[{"condition", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "3"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"56", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(PCL) <- ((SP))\>\"", ",", "\"\<(PCH) <- ((SP) + 1)\>\"", ",", 
        "\"\<(SP) <- (SP) + 2\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Return\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RET\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"RET\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"57", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "c1_", ",", "c2_", ",", "c3_", ",", "0", ",", "0", 
      ",", "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<If (CCC), \>\"", ",", "\"\<(PCL) <- ((SP))\>\"", ",", 
        "\"\<(PCH) <- ((SP) + 1)\>\"", ",", "\"\<(SP) <- (SP) + 2\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Conditional return\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<Rcondition\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"R`1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"condition", "[", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"58", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "n1_", ",", "n2_", ",", "n3_", ",", "1", ",", "1", 
      ",", "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<((SP) - 1) <- (PCH)\>\"", ",", "\"\<((SP) - 2) <- (PCL)\>\"", 
        ",", "\"\<(SP) <- (SP) - 2\>\"", ",", "\"\<(PC) <- 8*(NNN)\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Restart\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<RST n\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"RST    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"FromDigits", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n1", ",", "n2", ",", "n3"}], "}"}], ",", "2"}], "]"}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"59", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n1", ",", "n2", ",", "n3"}], "}"}], ",", "2"}], "]"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "1"}], "}"}], "]"}], ":=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<function\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<(PCH) <- (H)\>\"", ",", "\"\<(PCL) <- (L)\>\""}], 
        "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<name\>\"", "\[Rule]", 
       "\"\<Jump H and L indirect - move H and L to PC\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<PCHL\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<print\>\"", "\[Rule]", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<printf(\\\"PCHL\\\");\>\"", "]"}],
         "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<sort\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"60", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"STACK", ",", " ", 
    RowBox[{"I", "/", "O"}], ",", " ", 
    RowBox[{"AND", " ", "MACHINE", " ", "CONTROL", " ", "GROUP"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "r_", ",", "p_", ",", "0", ",", "1", ",", "0", ",", 
       "1"}], "}"}], "]"}], "/;", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "=!=", 
      RowBox[{"{", 
       RowBox[{"r", ",", "p"}], "}"}]}], ")"}]}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<((SP) - 1) <- (rh)\>\"", ",", "\"\<((SP) - 2) <- (rl)\>\"", ",", 
        "\"\<(SP) <- (SP) - 2\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Push\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<Register pair rp = SP may not be specified.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<PUSH rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"PUSH   `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "@", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"61", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<((SP) - 1) <- (A)\>\"", ",", 
        "\"\<((SP) - 2)[0] <- (CY), ((SP) - 2)[1] <- 1\>\"", ",", 
        "\"\<((SP) - 2)[2] <- (P), ((SP) - 2)[3] <- 0\>\"", ",", 
        "\"\<((SP) - 2)[4] <- (AC), ((SP) - 2)[5] <- 0\>\"", ",", 
        "\"\<((SP) - 2)[6] <- (Z), ((SP) - 2)[7] <- (S)\>\"", ",", 
        "\"\<(SP) <- (SP) - 2\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Push processor status word\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<PUSH PSW\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"PUSH   PSW\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"62", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"instruction", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "r_", ",", "p_", ",", "0", ",", "0", ",", "0", ",", 
       "1"}], "}"}], "]"}], "/;", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "=!=", 
      RowBox[{"{", 
       RowBox[{"r", ",", "p"}], "}"}]}], ")"}]}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<smallest\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(rh) <- ((SP) + 1)\>\"", ",", "\"\<(rl) <- ((SP) + 2)\>\"", ",", 
        "\"\<(SP) <- (SP) + 2\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Pop\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<Register pair rp = SP may not be specified.\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<POP rp\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"POP    `1`\\\");\>\"", "]"}], 
       "[", 
       RowBox[{"registerpair", "@", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"63", ",", 
        RowBox[{"FromDigits", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", "p"}], "}"}], ",", "2"}], "]"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<(CY) <- ((SP))[0]\>\"", ",", "\"\<(P) <- ((SP))[2]\>\"", ",", 
        "\"\<(AC) <- ((SP))[4]\>\"", ",", "\"\<(Z) <- ((SP))[6]\>\"", ",", 
        "\"\<(S) <- ((SP))[7]\>\"", ",", "\"\<(A) <- ((SP) + 1)\>\"", ",", 
        "\"\<(SP) <- (SP) + 2\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Pop processor status word\>\""}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<flag\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Z\>\"", ",", "\"\<S\>\"", ",", "\"\<P\>\"", ",", "\"\<CY\>\"", 
        ",", "\"\<AC\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<POP PSW\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\<printf(\\\"POP    PSW\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"64", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<(L) <-> ((SP))\>\"", ",", "\"\<(H) <-> ((SP) + 1)\>\""}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<name\>\"", "\[Rule]", "\"\<Exchange stack top with H and L\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<XTHL\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"XTHL\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"65", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(SP) <- (H)(L)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Move HL to SP\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<SPHL\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"SPHL\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"66", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(A) <- (data)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Input\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<IN port\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"IN     #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"67", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<function\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<(data) <- (A)\>\"", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Output\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<OUT port\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", 
        "\"\<printf(\\\"OUT    #0x%02x\\\", code[1]);\>\"", "]"}], "[", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<size\>\"", "\[Rule]", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"68", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Enable interrupts\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<EI\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<The interrupt system is enabled following the execution of the \
next instruction.\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"EI\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"69", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
      "1"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Disable interrupts\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<DI\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<The interrupt system is disabled immediately following the \
execution of the DI instruction.\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"DI\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"70", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Halt\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<HLT\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<The processor is stopped. The registers and flags are \
unnafected.\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"HLT\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"71", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instruction", "[", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<No op\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<assembly\>\"", "\[Rule]", "\"\<NOP\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<note\>\"", "\[Rule]", 
      "\"\<No operation is performed. The registers and flags are unnafected.\
\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<print\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<printf(\\\"NOP\\\");\>\"", "]"}], 
       "[", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<sort\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"72", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"instruction", "[", "_", "]"}], ":=", 
  RowBox[{"Missing", "[", "]"}]}]}], "Input",
 CellChangeTimes->{{3.7854330991411543`*^9, 3.7854332382611923`*^9}, {
   3.7854332790596857`*^9, 3.78543335722001*^9}, {3.785433420499449*^9, 
   3.785433451149909*^9}, {3.7854334875864763`*^9, 3.7854336616739187`*^9}, {
   3.7854337366426973`*^9, 3.785433737770028*^9}, {3.785434277864044*^9, 
   3.7854342783573103`*^9}, {3.785434336731917*^9, 3.785434449118137*^9}, {
   3.785434480752283*^9, 3.785434491053397*^9}, {3.7854345232351*^9, 
   3.785434530738443*^9}, {3.7854346259342937`*^9, 3.785434674257696*^9}, {
   3.7854348589620657`*^9, 3.785434966381175*^9}, {3.785435014603744*^9, 
   3.785435043502453*^9}, {3.785435086057453*^9, 3.7854353104397182`*^9}, {
   3.7854361239567747`*^9, 3.785436191919221*^9}, {3.785436373003633*^9, 
   3.785436373319688*^9}, {3.7854365625760927`*^9, 3.785436639315922*^9}, {
   3.785436879938425*^9, 3.785436945911957*^9}, {3.7854369759522333`*^9, 
   3.785437029445282*^9}, {3.785437064425137*^9, 3.785437163263399*^9}, {
   3.785437294043724*^9, 3.785437344557302*^9}, {3.785437438994652*^9, 
   3.785437551370542*^9}, {3.78543762133932*^9, 3.78543764374086*^9}, {
   3.7854384145482607`*^9, 3.785438492455244*^9}, {3.785438544316774*^9, 
   3.785438553803665*^9}, {3.785438630480935*^9, 3.785438719652771*^9}, {
   3.7854389010121326`*^9, 3.785439037708091*^9}, {3.785439243468342*^9, 
   3.785439338401548*^9}, {3.785439378658594*^9, 3.785439393925255*^9}, {
   3.785439437698558*^9, 3.785439513897929*^9}, {3.785439564474701*^9, 
   3.785439618646645*^9}, {3.785439709552988*^9, 3.7854397098481493`*^9}, {
   3.785439745261519*^9, 3.785439801137538*^9}, {3.7854399488264017`*^9, 
   3.785439949109593*^9}, {3.785440068759038*^9, 3.785440204693069*^9}, {
   3.785440248262231*^9, 3.7854402738324337`*^9}, {3.785440314797126*^9, 
   3.785440349425488*^9}, {3.785440384176771*^9, 3.785440429648522*^9}, {
   3.785440477237543*^9, 3.785440511823606*^9}, {3.785440542385895*^9, 
   3.785440570960574*^9}, {3.7854406095000343`*^9, 3.785440714835024*^9}, {
   3.7854407510744753`*^9, 3.785440841293066*^9}, {3.7854408731570473`*^9, 
   3.785440961609906*^9}, {3.785441005987318*^9, 3.785441197338656*^9}, {
   3.7854412337961817`*^9, 3.785441320153984*^9}, {3.785441382404566*^9, 
   3.785441477546109*^9}, {3.785445830713544*^9, 3.785445991782301*^9}, {
   3.7854461342285624`*^9, 3.785446134371509*^9}, {3.7854462052317457`*^9, 
   3.785446315497756*^9}, {3.785446412264439*^9, 3.78544643499121*^9}, {
   3.7854464794513083`*^9, 3.78544657189193*^9}, {3.7854466148129873`*^9, 
   3.785446666863792*^9}, {3.785446707553883*^9, 3.785446764756673*^9}, {
   3.785446865859865*^9, 3.785446970607087*^9}, {3.785447011846243*^9, 
   3.785447056384591*^9}, {3.785447089255754*^9, 3.785447124190681*^9}, {
   3.7854471709270163`*^9, 3.78544727846979*^9}, {3.78544732322583*^9, 
   3.7854473376630487`*^9}, {3.785447376355784*^9, 3.7854473815396223`*^9}, {
   3.7854474164196463`*^9, 3.785447443373681*^9}, {3.7854475281893806`*^9, 
   3.7854476264020863`*^9}, {3.785447676027997*^9, 3.7854477453811293`*^9}, {
   3.785447782630088*^9, 3.7854478370034246`*^9}, {3.7854478964365396`*^9, 
   3.7854480478011503`*^9}, {3.7854481060609617`*^9, 3.785448257798706*^9}, {
   3.785448295086494*^9, 3.785448371783637*^9}, {3.7854484168095703`*^9, 
   3.7854484886244307`*^9}, {3.7854485298892307`*^9, 3.7854485790877*^9}, {
   3.785448619624215*^9, 3.785448667738203*^9}, {3.785448701966695*^9, 
   3.785448707318025*^9}, {3.7854493278083763`*^9, 3.7854494247539577`*^9}, 
   3.785449467018826*^9, {3.785449501852317*^9, 3.785449619435153*^9}, {
   3.785449676098166*^9, 3.785449761643017*^9}, {3.785449794572414*^9, 
   3.785449845555023*^9}, {3.785449897541913*^9, 3.785449983656507*^9}, {
   3.785450014582605*^9, 3.785450017948007*^9}, {3.785450057388524*^9, 
   3.7854501957607193`*^9}, {3.785450237019957*^9, 3.785450332029827*^9}, {
   3.785450405815979*^9, 3.785450503573743*^9}, {3.785450534196908*^9, 
   3.785450556481534*^9}, {3.785450630891513*^9, 3.785450645490408*^9}, {
   3.785450710463668*^9, 3.785450727554685*^9}, {3.7854507978256702`*^9, 
   3.7854509406281443`*^9}, {3.78545100021476*^9, 3.785451097359529*^9}, {
   3.785451136823391*^9, 3.785451359021356*^9}, {3.785451399915751*^9, 
   3.785451601380728*^9}, {3.785452103258532*^9, 3.7854521785073767`*^9}, {
   3.785452302043091*^9, 3.785452354918413*^9}, {3.7854524238460293`*^9, 
   3.785452448393092*^9}, {3.7854524992479563`*^9, 3.785452520326517*^9}, {
   3.7854525545554*^9, 3.785452846938107*^9}, 3.785452921978817*^9, {
   3.785453019977911*^9, 3.785453127087655*^9}, {3.785453171348413*^9, 
   3.785453180911268*^9}},
 Background->GrayLevel[0.85],
 CellLabel->"In[24]:=",ExpressionUUID->"83d568c8-fa63-45ad-b753-ae44920f4ad6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
     "1"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.78543398262747*^9, 3.785433997304688*^9}, 
   3.785434539341531*^9, 3.785434680279457*^9, {3.78543500377109*^9, 
   3.785435008261364*^9}, 3.785436298800321*^9, 3.7854369258554907`*^9, {
   3.785437035257079*^9, 3.785437039403119*^9}, 3.785437168993341*^9, {
   3.785437215830245*^9, 3.785437219160368*^9}, 3.7854373615583267`*^9, {
   3.785437566609477*^9, 3.785437570934227*^9}, 3.785438582272481*^9, 
   3.785438733636139*^9, {3.785439044561311*^9, 3.7854390516798887`*^9}, {
   3.7854393474123087`*^9, 3.785439347885648*^9}, 3.7854395232329807`*^9, 
   3.785439624377501*^9, 3.785439809964138*^9, 3.785440181733115*^9, 
   3.785440281222155*^9, 3.785440357996224*^9, 3.7854404353861313`*^9, 
   3.785440519396449*^9, 3.785440581157144*^9, 3.78544072282375*^9, 
   3.785440847447872*^9, {3.785440953448207*^9, 3.785440967565111*^9}, 
   3.785441203039926*^9, {3.785441307497655*^9, 3.785441323653318*^9}, 
   3.785446044328281*^9, 3.785446588066966*^9, 3.78544667624482*^9, 
   3.7854468030788803`*^9, 3.78544698088759*^9, 3.785447063388205*^9, 
   3.7854471339732857`*^9, 3.785447289960503*^9, 3.785447353950865*^9, 
   3.785447389570863*^9, 3.785447451071925*^9, 3.785447642848607*^9, 
   3.785447757556815*^9, 3.785447842842929*^9, 3.785448266306789*^9, 
   3.785448349723692*^9, 3.7854484953180637`*^9, 3.785448586845866*^9, 
   3.785448678818625*^9, 3.7854494348454227`*^9, 3.785449635978218*^9, 
   3.78544985342132*^9, 3.785449995360409*^9, 3.7854501991628838`*^9, 
   3.7854503441701393`*^9, 3.7854505754596577`*^9, 3.785450954535946*^9, 
   3.785451102750136*^9, 3.785451373176519*^9, {3.785451592669829*^9, 
   3.78545160721592*^9}, 3.785452209030249*^9},
 CellLabel->
  "In[3170]:=",ExpressionUUID->"0487e8f3-556f-4734-9ca2-98566d8f7e17"],

Cell[BoxData["227"], "Output",
 CellChangeTimes->{{3.785433984685728*^9, 3.785433997828627*^9}, 
   3.785434539941217*^9, 3.7854346807394743`*^9, 3.785435008518491*^9, 
   3.7854362992179813`*^9, 3.785436926315084*^9, 3.785437039807876*^9, 
   3.785437169456653*^9, 3.785437219629805*^9, 3.78543736207269*^9, 
   3.785437573765133*^9, 3.785438583052754*^9, 3.785438734470544*^9, 
   3.785439052441104*^9, 3.7854393485868597`*^9, 3.785439523729233*^9, 
   3.78543962482444*^9, 3.7854398103624*^9, 3.785440182207193*^9, 
   3.785440281659542*^9, 3.785440358431222*^9, 3.7854404358460407`*^9, 
   3.785440519854176*^9, 3.785440581621169*^9, 3.785440723270158*^9, 
   3.785440847862298*^9, {3.785440953885573*^9, 3.785440967939004*^9}, 
   3.785441203457428*^9, {3.785441307978163*^9, 3.785441324142646*^9}, 
   3.785446045176958*^9, 3.785446589075193*^9, 3.785446679137557*^9, 
   3.7854468039704103`*^9, 3.785446981760294*^9, 3.7854470643251467`*^9, 
   3.78544713488521*^9, 3.78544729086285*^9, 3.785447354751706*^9, 
   3.785447390374021*^9, 3.7854474544952717`*^9, 3.785447643892498*^9, 
   3.785447758456533*^9, 3.785447843552541*^9, 3.785448268623191*^9, 
   3.785448350609991*^9, 3.785448496185141*^9, 3.7854485877665358`*^9, 
   3.785448679770072*^9, 3.785449435847889*^9, 3.785449636920046*^9, 
   3.785449854301093*^9, 3.785449996197773*^9, 3.785450200026003*^9, 
   3.785450344990733*^9, 3.785450576345868*^9, 3.7854509553485727`*^9, 
   3.785451103587377*^9, 3.785451374006638*^9, {3.78545159388405*^9, 
   3.7854516074970407`*^9}, 3.7854522099234943`*^9},
 CellLabel->
  "Out[3170]=",ExpressionUUID->"33e4fca8-0b69-417f-9689-d7cbb77a6517"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"instruction", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
    "0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7854354492330103`*^9, 3.78543546421532*^9}, {
  3.785436286906476*^9, 3.785436294491702*^9}, {3.785439354283414*^9, 
  3.785439356222301*^9}},
 CellLabel->
  "In[306]:=",ExpressionUUID->"eb2f7428-504b-4a17-952a-fa4a9f0e6540"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"function\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"(A) <- (A) + ((H)(L))\"\>", "}"}]}], ",", 
   RowBox[{"\<\"flags\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"Z\"\>", ",", "\<\"S\"\>", ",", "\<\"P\"\>", 
      ",", "\<\"CY\"\>", ",", "\<\"AC\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Add memory\"\>"}], ",", 
   RowBox[{"\<\"assembly\"\>", "\[Rule]", "\<\"ADD M\"\>"}], ",", 
   RowBox[{"\<\"print\"\>", "\[Rule]", "\<\"printf(\\\"ADD    M\\\");\"\>"}], 
   ",", 
   RowBox[{"\<\"sort\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"15", ",", "0"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.785435464458415*^9, 3.7854362949160013`*^9, 
  3.785439356935602*^9},
 CellLabel->
  "Out[306]=",ExpressionUUID->"c4eb6a94-dbdc-4890-b9e2-8db914e433bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SortBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"bits", "=", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"#", ",", "2", ",", "8"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"instr", "=", 
             RowBox[{"instruction", "[", "bits", "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MissingQ", "[", "instr", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"\[Infinity]", ",", "0"}], "}"}], ",", 
               RowBox[{"StringJoin", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<\\t\\t\>\"", ",", "\"\<case \>\"", ",", "\"\<0x\>\"", 
                  ",", 
                  RowBox[{"IntegerString", "[", 
                   RowBox[{"#", ",", "16", ",", "2"}], "]"}], ",", 
                  "\"\<: \>\"", ",", "\"\<// \>\"", ",", 
                  RowBox[{"IntegerString", "[", 
                   RowBox[{"#", ",", "2", ",", "8"}], "]"}]}], "}"}], "]"}]}],
               "}"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"instr", "[", "\"\<sort\>\"", "]"}], ",", 
               RowBox[{"StringJoin", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                 "\"\<\\t\\t\>\"", ",", "\"\<case \>\"", ",", "\"\<0x\>\"", 
                  ",", 
                  RowBox[{"IntegerString", "[", 
                   RowBox[{"#", ",", "16", ",", "2"}], "]"}], ",", 
                  "\"\<: \>\"", ",", "\"\<// \>\"", ",", 
                  RowBox[{"IntegerString", "[", 
                   RowBox[{"#", ",", "2", ",", "8"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"instr", "[", "\"\<smallest\>\"", "]"}], "===", 
                    "bits"}], "||", 
                    RowBox[{"MissingQ", "[", 
                    RowBox[{"instr", "[", "\"\<smallest\>\"", "]"}], "]"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"StringRiffle", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<<\>\"", "<>", 
                    RowBox[{"instr", "[", "\"\<name\>\"", "]"}], "<>", 
                    "\"\<>\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{"instr", "[", "\"\<assembly\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MissingQ", "[", 
                    RowBox[{"instr", "[", "\"\<function\>\"", "]"}], "]"}]}], 
                    ",", 
                    RowBox[{"StringRiffle", "[", 
                    RowBox[{
                    RowBox[{"instr", "[", "\"\<function\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\\t\>\"", ",", "\"\<\\n\\t\\t\\t\\t\\t\>\"", ",", 
                    "\"\<\>\""}], "}"}]}], "]"}], ",", "Nothing"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MissingQ", "[", 
                    RowBox[{"instr", "[", "\"\<flags\>\"", "]"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"\<\\n\\t\\t\\t\\tflags: \>\"", "<>", 
                    RowBox[{"StringRiffle", "[", 
                    RowBox[{
                    RowBox[{"instr", "[", "\"\<flags\>\"", "]"}], ",", 
                    "\"\<,\>\""}], "]"}]}], ",", "Nothing"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MissingQ", "[", 
                    RowBox[{"instr", "[", "\"\<note\>\"", "]"}], "]"}]}], ",", 
                    RowBox[{"\"\<note: \>\"", "<>", 
                    RowBox[{"instr", "[", "\"\<note\>\"", "]"}]}], ",", 
                    "Nothing"}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\\n\\t\\t\\t/*\\n\\t\\t\\t\\t\>\"", ",", 
                    "\"\<\\n\\t\\t\\t\\t\>\"", ",", 
                    "\"\<\\n\\t\\t\\t*/\>\""}], "}"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", "Nothing"}], "]"}], ",", 
                  "\[IndentingNewLine]", "\"\<\\n\\t\\t\\t\>\"", ",", 
                  RowBox[{"instr", "[", "\"\<print\>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MissingQ", "[", 
                    RowBox[{"instr", "[", "\"\<size\>\"", "]"}], "]"}], ",", 
                    "Nothing", ",", 
                    RowBox[{
                    RowBox[{
                    "StringTemplate", "[", 
                    "\"\<\\n\\t\\t\\topbytes = `1`;\>\"", "]"}], "[", 
                    RowBox[{"instr", "[", "\"\<size\>\"", "]"}], "]"}]}], 
                   "]"}], ",", "\[IndentingNewLine]", "\"\<\\n\\t\\t\\t\>\"", 
                  ",", "\[IndentingNewLine]", "\"\<break;\>\""}], 
                 "\[IndentingNewLine]", "}"}], "]"}]}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "255"}], "]"}]}], ",", "First"}], "]"}], "//", 
   "Identity"}], "//", 
  RowBox[{
   RowBox[{"StringRiffle", "[", 
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", "\"\<\\n\>\""}], "]"}], 
   "&"}]}]], "Input",
 CellChangeTimes->{{3.785433777923346*^9, 3.785434017836129*^9}, 
   3.785434361281476*^9, {3.785434543131876*^9, 3.78543456470787*^9}, {
   3.785434702694331*^9, 3.785434703839209*^9}, {3.785435362761961*^9, 
   3.785435436730983*^9}, {3.785435701387813*^9, 3.785436013669448*^9}, {
   3.785436204836739*^9, 3.785436262294517*^9}, {3.7854363049514437`*^9, 
   3.7854363054543037`*^9}, {3.785436930156137*^9, 3.785436930713303*^9}, {
   3.785437043041443*^9, 3.7854370434879932`*^9}, {3.785437174486809*^9, 
   3.7854371750303793`*^9}, {3.7854372228903713`*^9, 3.785437273850276*^9}, {
   3.78543736759555*^9, 3.7854373679496098`*^9}, {3.7854375776602707`*^9, 
   3.785437578181881*^9}, {3.785438587466475*^9, 3.78543858788186*^9}, {
   3.785438739525346*^9, 3.78543876345962*^9}, {3.785439056651335*^9, 
   3.785439144242141*^9}, {3.7854391951647253`*^9, 3.785439209676065*^9}, {
   3.785439367005538*^9, 3.785439367687294*^9}, {3.785439528000825*^9, 
   3.7854395288538933`*^9}, {3.785439628255402*^9, 3.785439631429905*^9}, {
   3.785439814147094*^9, 3.785439815315399*^9}, {3.785439990922468*^9, 
   3.7854400422770433`*^9}, {3.785440211337007*^9, 3.785440211803952*^9}, {
   3.785440287565857*^9, 3.785440293291732*^9}, {3.785440362305184*^9, 
   3.785440363257073*^9}, {3.7854404400768147`*^9, 3.785440440857204*^9}, {
   3.7854405239004993`*^9, 3.7854405248498917`*^9}, {3.785440585882465*^9, 
   3.785440586645756*^9}, {3.785440726537904*^9, 3.785440726760594*^9}, {
   3.7854408517390347`*^9, 3.785440852157526*^9}, {3.785440972887212*^9, 
   3.785440979234419*^9}, {3.7854412066148653`*^9, 3.785441206950939*^9}, {
   3.7854413277577047`*^9, 3.7854413296175117`*^9}, {3.785446004496022*^9, 
   3.785446051768251*^9}, {3.7854461148989687`*^9, 3.785446188099234*^9}, {
   3.785446593864126*^9, 3.785446594951868*^9}, {3.785446683303194*^9, 
   3.785446684207127*^9}, {3.7854468082307796`*^9, 3.7854468089412622`*^9}, {
   3.7854469907558813`*^9, 3.785446991981937*^9}, {3.785447070257935*^9, 
   3.785447071454916*^9}, {3.7854471443387012`*^9, 3.7854471452517843`*^9}, {
   3.785447298184227*^9, 3.785447299191986*^9}, {3.78544739489924*^9, 
   3.785447396355815*^9}, {3.785447458475263*^9, 3.7854474592515917`*^9}, {
   3.7854476475629187`*^9, 3.785447649393499*^9}, {3.785447763467572*^9, 
   3.785447764239203*^9}, {3.785447848968626*^9, 3.785447849593925*^9}, {
   3.785448059356185*^9, 3.785448059687886*^9}, {3.785448167824112*^9, 
   3.785448168557912*^9}, {3.785448276229121*^9, 3.785448276665237*^9}, {
   3.785448388983684*^9, 3.7854483893016768`*^9}, {3.7854485013629093`*^9, 
   3.785448502027615*^9}, {3.785448593792848*^9, 3.785448594597066*^9}, {
   3.785448685406077*^9, 3.785448686012233*^9}, {3.7854494426110687`*^9, 
   3.785449443584021*^9}, {3.785449642129839*^9, 3.785449642994863*^9}, {
   3.785449859116168*^9, 3.785449859838551*^9}, {3.785450000570189*^9, 
   3.7854500014309893`*^9}, {3.785450206097472*^9, 3.785450206964916*^9}, {
   3.785450348995715*^9, 3.785450349629093*^9}, {3.785450581683483*^9, 
   3.78545058252282*^9}, {3.785450676413571*^9, 3.785450679334429*^9}, {
   3.785453243759461*^9, 3.785453244556673*^9}, {3.785453381836125*^9, 
   3.785453422988701*^9}, {3.785453466364698*^9, 3.785453466950646*^9}},
 Background->RGBColor[0.94, 0.91, 0.88],
 CellLabel->
  "In[102]:=",ExpressionUUID->"1c9324da-1d6d-4a12-a862-1463a88cad52"],

Cell[BoxData["\<\"\\t\\tcase 0x40: // \
01000000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move register>\\n\\t\\t\\t\\tMOV \
r1,r2\\n\\t\\t\\t\\t\\t(r1) <- (r2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"MOV   \
 B,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x41: // \
01000001\\n\\t\\t\\tprintf(\\\"MOV    \
B,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x42: // 01000010\\n\\t\\t\\tprintf(\
\\\"MOV    B,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x43: // \
01000011\\n\\t\\t\\tprintf(\\\"MOV    \
B,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x44: // 01000100\\n\\t\\t\\tprintf(\
\\\"MOV    B,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x45: // \
01000101\\n\\t\\t\\tprintf(\\\"MOV    \
B,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x47: // 01000111\\n\\t\\t\\tprintf(\
\\\"MOV    B,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x48: // \
01001000\\n\\t\\t\\tprintf(\\\"MOV    \
C,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x49: // 01001001\\n\\t\\t\\tprintf(\
\\\"MOV    C,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4a: // \
01001010\\n\\t\\t\\tprintf(\\\"MOV    \
C,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4b: // 01001011\\n\\t\\t\\tprintf(\
\\\"MOV    C,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4c: // \
01001100\\n\\t\\t\\tprintf(\\\"MOV    \
C,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4d: // 01001101\\n\\t\\t\\tprintf(\
\\\"MOV    C,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4f: // \
01001111\\n\\t\\t\\tprintf(\\\"MOV    \
C,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x50: // 01010000\\n\\t\\t\\tprintf(\
\\\"MOV    D,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x51: // \
01010001\\n\\t\\t\\tprintf(\\\"MOV    \
D,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x52: // 01010010\\n\\t\\t\\tprintf(\
\\\"MOV    D,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x53: // \
01010011\\n\\t\\t\\tprintf(\\\"MOV    \
D,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x54: // 01010100\\n\\t\\t\\tprintf(\
\\\"MOV    D,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x55: // \
01010101\\n\\t\\t\\tprintf(\\\"MOV    \
D,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x57: // 01010111\\n\\t\\t\\tprintf(\
\\\"MOV    D,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x58: // \
01011000\\n\\t\\t\\tprintf(\\\"MOV    \
E,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x59: // 01011001\\n\\t\\t\\tprintf(\
\\\"MOV    E,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5a: // \
01011010\\n\\t\\t\\tprintf(\\\"MOV    \
E,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5b: // 01011011\\n\\t\\t\\tprintf(\
\\\"MOV    E,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5c: // \
01011100\\n\\t\\t\\tprintf(\\\"MOV    \
E,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5d: // 01011101\\n\\t\\t\\tprintf(\
\\\"MOV    E,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5f: // \
01011111\\n\\t\\t\\tprintf(\\\"MOV    \
E,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x60: // 01100000\\n\\t\\t\\tprintf(\
\\\"MOV    H,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x61: // \
01100001\\n\\t\\t\\tprintf(\\\"MOV    \
H,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x62: // 01100010\\n\\t\\t\\tprintf(\
\\\"MOV    H,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x63: // \
01100011\\n\\t\\t\\tprintf(\\\"MOV    \
H,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x64: // 01100100\\n\\t\\t\\tprintf(\
\\\"MOV    H,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x65: // \
01100101\\n\\t\\t\\tprintf(\\\"MOV    \
H,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x67: // 01100111\\n\\t\\t\\tprintf(\
\\\"MOV    H,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x68: // \
01101000\\n\\t\\t\\tprintf(\\\"MOV    \
L,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x69: // 01101001\\n\\t\\t\\tprintf(\
\\\"MOV    L,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6a: // \
01101010\\n\\t\\t\\tprintf(\\\"MOV    \
L,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6b: // 01101011\\n\\t\\t\\tprintf(\
\\\"MOV    L,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6c: // \
01101100\\n\\t\\t\\tprintf(\\\"MOV    \
L,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6d: // 01101101\\n\\t\\t\\tprintf(\
\\\"MOV    L,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6f: // \
01101111\\n\\t\\t\\tprintf(\\\"MOV    \
L,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x78: // 01111000\\n\\t\\t\\tprintf(\
\\\"MOV    A,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x79: // \
01111001\\n\\t\\t\\tprintf(\\\"MOV    \
A,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7a: // 01111010\\n\\t\\t\\tprintf(\
\\\"MOV    A,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7b: // \
01111011\\n\\t\\t\\tprintf(\\\"MOV    \
A,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7c: // 01111100\\n\\t\\t\\tprintf(\
\\\"MOV    A,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7d: // \
01111101\\n\\t\\t\\tprintf(\\\"MOV    \
A,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7f: // 01111111\\n\\t\\t\\tprintf(\
\\\"MOV    A,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x46: // \
01000110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move from memory>\\n\\t\\t\\t\\tMOV r,M\
\\n\\t\\t\\t\\t\\t(r) <- ((H)(L))\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"MOV    \
B,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x4e: // 01001110\\n\\t\\t\\tprintf(\
\\\"MOV    C,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x56: // \
01010110\\n\\t\\t\\tprintf(\\\"MOV    \
D,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x5e: // 01011110\\n\\t\\t\\tprintf(\
\\\"MOV    E,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x66: // \
01100110\\n\\t\\t\\tprintf(\\\"MOV    \
H,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x6e: // 01101110\\n\\t\\t\\tprintf(\
\\\"MOV    L,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x7e: // \
01111110\\n\\t\\t\\tprintf(\\\"MOV    \
A,M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x70: // \
01110000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move to memory>\\n\\t\\t\\t\\tMOV \
M,r\\n\\t\\t\\t\\t\\t((H)(L)) <- (r)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"MOV  \
  M,B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x71: // \
01110001\\n\\t\\t\\tprintf(\\\"MOV    \
M,C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x72: // 01110010\\n\\t\\t\\tprintf(\
\\\"MOV    M,D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x73: // \
01110011\\n\\t\\t\\tprintf(\\\"MOV    \
M,E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x74: // 01110100\\n\\t\\t\\tprintf(\
\\\"MOV    M,H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x75: // \
01110101\\n\\t\\t\\tprintf(\\\"MOV    \
M,L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x77: // 01110111\\n\\t\\t\\tprintf(\
\\\"MOV    M,A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x06: // \
00000110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move immediate>\\n\\t\\t\\t\\tMVI \
r,data\\n\\t\\t\\t\\t\\t(r) <- \
(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"MVI    B,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x0e: // \
00001110\\n\\t\\t\\tprintf(\\\"MVI    C,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x16: // \
00010110\\n\\t\\t\\tprintf(\\\"MVI    D,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x1e: // \
00011110\\n\\t\\t\\tprintf(\\\"MVI    E,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x26: // \
00100110\\n\\t\\t\\tprintf(\\\"MVI    H,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x2e: // \
00101110\\n\\t\\t\\tprintf(\\\"MVI    L,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x3e: // \
00111110\\n\\t\\t\\tprintf(\\\"MVI    A,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x36: // \
00110110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move to memory \
immediate>\\n\\t\\t\\t\\tMVI M,data\\n\\t\\t\\t\\t\\t((H)(L)) <- \
(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"MVI    M,#0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x01: // \
00000001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Load register pair \
immediate>\\n\\t\\t\\t\\tLXI rp,data 16\\n\\t\\t\\t\\t\\t(rh) <- \
(byte3)\\n\\t\\t\\t\\t\\t(rl) <- \
(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"LXI    B,#0x%02x%02x\\\", \
code[2], code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x11: // 00010001\\n\\t\\t\\tprintf(\\\"LXI    D,#0x%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x21: // \
00100001\\n\\t\\t\\tprintf(\\\"LXI    H,#0x%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x31: // \
00110001\\n\\t\\t\\tprintf(\\\"LXI    SP,#0x%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x3a: // \
00111010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Load accumulator \
direct>\\n\\t\\t\\t\\tLDA addr\\n\\t\\t\\t\\t\\t(A) <- ((byte3)(byte2))\\n\\t\
\\t\\t*/\\n\\t\\t\\tprintf(\\\"LDA    #$%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x32: // \
00110010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Store accumulator \
direct>\\n\\t\\t\\t\\tSTA addr\\n\\t\\t\\t\\t\\t((byte3)(byte2)) <- (A)\\n\\t\
\\t\\t*/\\n\\t\\t\\tprintf(\\\"STA    #$%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x2a: // \
00101010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Load H and L direct>\\n\\t\\t\\t\\tLHLD \
addr\\n\\t\\t\\t\\t\\t(L) <- ((byte3)(byte2))\\n\\t\\t\\t\\t\\t(H) <- \
((byte3)(byte2) + 1)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"LHLD   \
#$%02x%02x\\\", code[2], code[1]);\\n\\t\\t\\topbytes = \
3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x22: // 00100010\\n\\t\\t\\t/*\\n\\t\\t\\t\
\\t<Store H and L direct>\\n\\t\\t\\t\\tSHLD \
addr\\n\\t\\t\\t\\t\\t((byte3)(byte2)) <- \
(L)\\n\\t\\t\\t\\t\\t((byte3)(byte2) + 1) <- \
(H)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SHLD   #$%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x0a: // \
00001010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Load accumulator \
indirect>\\n\\t\\t\\t\\tLDAX rp\\n\\t\\t\\t\\t\\t(A) <- \
((rp))\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"LDAX   \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x1a: // 00011010\\n\\t\\t\\tprintf(\\\
\"LDAX   D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x02: // \
00000010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Store accumulator indirect>\\n\\t\\t\\t\
\\tSTAX rp\\n\\t\\t\\t\\t\\t((rp)) <- \
(A)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"STAX   \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x12: // 00010010\\n\\t\\t\\tprintf(\\\
\"STAX   D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xeb: // \
11101011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Exchange H and L with D and E>\\n\\t\\t\
\\t\\tXCHG\\n\\t\\t\\t\\t\\t(H) <-> (D)\\n\\t\\t\\t\\t\\t(L) <-> (E)\\n\\t\\t\
\\t*/\\n\\t\\t\\tprintf(\\\"XCHG\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x80: \
// 10000000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add register>\\n\\t\\t\\t\\tADD r\\n\
\\t\\t\\t\\t\\t(A) <- (A) + (r)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ADD    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x81: // 10000001\\n\\t\\t\\tprintf(\\\
\"ADD    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x82: // \
10000010\\n\\t\\t\\tprintf(\\\"ADD    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x83: // 10000011\\n\\t\\t\\tprintf(\\\"ADD    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x84: // 10000100\\n\\t\\t\\tprintf(\\\
\"ADD    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x85: // \
10000101\\n\\t\\t\\tprintf(\\\"ADD    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x87: // 10000111\\n\\t\\t\\tprintf(\\\"ADD    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x86: // \
10000110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add memory>\\n\\t\\t\\t\\tADD \
M\\n\\t\\t\\t\\t\\t(A) <- (A) + ((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ADD    \
M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xc6: // \
11000110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add immediate>\\n\\t\\t\\t\\tADI \
data\\n\\t\\t\\t\\t\\t(A) <- (A) + \
(byte2)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ADI    #0x%02x\\\", code[1]);\
\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x88: // \
10001000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add register with \
carry>\\n\\t\\t\\t\\tADC r\\n\\t\\t\\t\\t\\t(A) <- (A) + (r) + \
(CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ADC    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x89: // 10001001\\n\\t\\t\\tprintf(\\\
\"ADC    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x8a: // \
10001010\\n\\t\\t\\tprintf(\\\"ADC    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x8b: // 10001011\\n\\t\\t\\tprintf(\\\"ADC    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x8c: // 10001100\\n\\t\\t\\tprintf(\\\
\"ADC    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x8d: // \
10001101\\n\\t\\t\\tprintf(\\\"ADC    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x8f: // 10001111\\n\\t\\t\\tprintf(\\\"ADC    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x8e: // \
10001110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add memory with \
carry>\\n\\t\\t\\t\\tADC M\\n\\t\\t\\t\\t\\t(A) <- (A) + ((H)(L)) + \
(CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ADC    \
M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xce: // \
11001110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add immediate with \
carry>\\n\\t\\t\\t\\tACI data\\n\\t\\t\\t\\t\\t(A) <- (A) + (byte2) + (CY)\\n\
\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ACI    #0x%02x\\\", code[1]);\
\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x90: // \
10010000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract register>\\n\\t\\t\\t\\tSUB \
r\\n\\t\\t\\t\\t\\t(A) <- (A) - (r)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SUB    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x91: // 10010001\\n\\t\\t\\tprintf(\\\
\"SUB    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x92: // \
10010010\\n\\t\\t\\tprintf(\\\"SUB    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x93: // 10010011\\n\\t\\t\\tprintf(\\\"SUB    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x94: // 10010100\\n\\t\\t\\tprintf(\\\
\"SUB    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x95: // \
10010101\\n\\t\\t\\tprintf(\\\"SUB    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x97: // 10010111\\n\\t\\t\\tprintf(\\\"SUB    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x96: // \
10010110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract memory>\\n\\t\\t\\t\\tSUB M\\n\
\\t\\t\\t\\t\\t(A) <- (A) - ((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SUB    \
M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd6: // \
11010110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract immediate>\\n\\t\\t\\t\\tSUI \
data\\n\\t\\t\\t\\t\\t(A) <- (A) - \
(byte2)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SUI    #0x%02x\\\", code[1]);\
\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x98: // \
10011000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract register with borrow>\\n\\t\\t\
\\t\\tSBB r\\n\\t\\t\\t\\t\\t(A) <- (A) - (r) - \
(CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SBB    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x99: // 10011001\\n\\t\\t\\tprintf(\\\
\"SBB    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x9a: // \
10011010\\n\\t\\t\\tprintf(\\\"SBB    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x9b: // 10011011\\n\\t\\t\\tprintf(\\\"SBB    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x9c: // 10011100\\n\\t\\t\\tprintf(\\\
\"SBB    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x9d: // \
10011101\\n\\t\\t\\tprintf(\\\"SBB    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x9f: // 10011111\\n\\t\\t\\tprintf(\\\"SBB    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x9e: // \
10011110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract memory with \
borrow>\\n\\t\\t\\t\\tSBB M\\n\\t\\t\\t\\t\\t(A) <- (A) - ((H)(L)) - \
(CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SBB    \
M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xde: // \
11011110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Subtract immediate with \
borrow>\\n\\t\\t\\t\\tSBI data\\n\\t\\t\\t\\t\\t(A) <- (A) - (byte2) - \
(CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"SBI    #0x%02x\\\", code[1]);\
\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x04: // \
00000100\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Increment register>\\n\\t\\t\\t\\tINR r\
\\n\\t\\t\\t\\t\\t(r) <- (r) + 1\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,AC\
\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"INR    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x0c: // 00001100\\n\\t\\t\\tprintf(\\\
\"INR    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x14: // \
00010100\\n\\t\\t\\tprintf(\\\"INR    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x1c: // 00011100\\n\\t\\t\\tprintf(\\\"INR    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x24: // 00100100\\n\\t\\t\\tprintf(\\\
\"INR    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x2c: // \
00101100\\n\\t\\t\\tprintf(\\\"INR    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x3c: // 00111100\\n\\t\\t\\tprintf(\\\"INR    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x34: // \
00110100\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Increment memory>\\n\\t\\t\\t\\tINR \
M\\n\\t\\t\\t\\t\\t((H)(L)) <- ((H)(L)) + \
1\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"INR    M\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0x05: // 00000101\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Decrement \
register>\\n\\t\\t\\t\\tDCR r\\n\\t\\t\\t\\t\\t(r) <- (r) - \
1\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"DCR    B\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0x0d: // 00001101\\n\\t\\t\\tprintf(\\\"DCR    C\\\");\\n\\t\\t\
\\tbreak;\\n\\t\\tcase 0x15: // 00010101\\n\\t\\t\\tprintf(\\\"DCR    D\\\");\
\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x1d: // 00011101\\n\\t\\t\\tprintf(\\\"DCR   \
 E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x25: // \
00100101\\n\\t\\t\\tprintf(\\\"DCR    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x2d: // 00101101\\n\\t\\t\\tprintf(\\\"DCR    \
L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x3d: // 00111101\\n\\t\\t\\tprintf(\\\
\"DCR    A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x35: // \
00110101\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Decrement memory>\\n\\t\\t\\t\\tDCR \
M\\n\\t\\t\\t\\t\\t((H)(L)) <- ((H)(L)) - \
1\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,AC\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"DCR    M\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0x03: // 00000011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Increment \
register pair>\\n\\t\\t\\t\\tINX rp\\n\\t\\t\\t\\t\\t(rh)(rl) <- (rh)(rl) + 1\
\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"INX    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x13: // 00010011\\n\\t\\t\\tprintf(\\\
\"INX    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x23: // \
00100011\\n\\t\\t\\tprintf(\\\"INX    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x33: // 00110011\\n\\t\\t\\tprintf(\\\"INX    \
SP\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x0b: // 00001011\\n\\t\\t\\t/*\\n\\t\
\\t\\t\\t<Decrement register pair>\\n\\t\\t\\t\\tDCX \
rp\\n\\t\\t\\t\\t\\t(rh)(rl) <- (rh)(rl) - 1\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\
\\\"DCX    B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x1b: // \
00011011\\n\\t\\t\\tprintf(\\\"DCX    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x2b: // 00101011\\n\\t\\t\\tprintf(\\\"DCX    \
H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x3b: // 00111011\\n\\t\\t\\tprintf(\\\
\"DCX    SP\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x09: // \
00001001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Add register pair to H and \
L>\\n\\t\\t\\t\\tDAD rp\\n\\t\\t\\t\\t\\t(H)(L) <- (H)(L) + (rh)(rl)\\n\\t\\t\
\\t\\t\\n\\t\\t\\t\\tflags: CY\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"DAD    B\\\
\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x19: // \
00011001\\n\\t\\t\\tprintf(\\\"DAD    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x29: // 00101001\\n\\t\\t\\tprintf(\\\"DAD    \
H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x39: // 00111001\\n\\t\\t\\tprintf(\\\
\"DAD    SP\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x27: // \
00100111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Decimal adjust accumulator>\\n\\t\\t\\t\
\\tDAA\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: \
\\n\\t\\t\\t\\t\\t\\tThe eight-bit number in the accumulator is adjusted to \
form two four-bit Binary-Coded-Decimal digits by the following process:\\n\\t\
\\t\\t\\t\\t\\t\\t1. If the value of the least significant 4 bits of the \
accumulator is greater than 9 or if the AC flag is set, 6 is added to the \
accumulator.\\n\\t\\t\\t\\t\\t\\t\\t2. If the value of the most 4 bits of the \
accumulator is now greater than 9, or if the CY flag is set, 6 is added to \
the most significant 4 bits of the \
accumulator.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"DAA\\\");\\n\\t\\t\\tbreak;\\\
n\\t\\tcase 0xa0: // 10100000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<AND \
register>\\n\\t\\t\\t\\tANA r\\n\\t\\t\\t\\t\\t(A) <- (A) & \
(r)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The \
CY flag is cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ANA    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa1: // 10100001\\n\\t\\t\\tprintf(\\\
\"ANA    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa2: // \
10100010\\n\\t\\t\\tprintf(\\\"ANA    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xa3: // 10100011\\n\\t\\t\\tprintf(\\\"ANA    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa4: // 10100100\\n\\t\\t\\tprintf(\\\
\"ANA    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa5: // \
10100101\\n\\t\\t\\tprintf(\\\"ANA    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xa7: // 10100111\\n\\t\\t\\tprintf(\\\"ANA    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa6: // \
10100110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<AND memory>\\n\\t\\t\\t\\tANA \
M\\n\\t\\t\\t\\t\\t(A) <- (A) & ((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY flag is \
cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ANA    M\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0xe6: // 11100110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<AND \
immediate>\\n\\t\\t\\t\\tANI data\\n\\t\\t\\t\\t\\t(A) <- (A) & (byte2)\\n\\t\
\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY and AC \
flags are cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ANI    #0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa8: // \
10101000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Exclusive OR \
register>\\n\\t\\t\\t\\tXRA r\\n\\t\\t\\t\\t\\t(A) <- (A) XOR (r)\\n\\t\\t\\t\
\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY and AC flags \
are cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"XRA    \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xa9: // 10101001\\n\\t\\t\\tprintf(\\\
\"XRA    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xaa: // \
10101010\\n\\t\\t\\tprintf(\\\"XRA    D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xab: // 10101011\\n\\t\\t\\tprintf(\\\"XRA    \
E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xac: // 10101100\\n\\t\\t\\tprintf(\\\
\"XRA    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xad: // \
10101101\\n\\t\\t\\tprintf(\\\"XRA    L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xaf: // 10101111\\n\\t\\t\\tprintf(\\\"XRA    \
A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xae: // \
10101110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Exclusive OR memory>\\n\\t\\t\\t\\tXRA \
M\\n\\t\\t\\t\\t\\t(A) <- (A) XOR \
((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: \
The CY and AC flags are cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"XRA    M\
\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xee: // \
11101110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Exclusive OR \
immediate>\\n\\t\\t\\t\\tXRI data\\n\\t\\t\\t\\t\\t(A) <- (A) XOR \
(byte2)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: \
The CY and AC flags are cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"XRI    \
#0x%02x\\\", code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xb0: // 10110000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<OR register>\\n\\t\\t\\t\\tORA \
r\\n\\t\\t\\t\\t\\t(A) <- (A) OR (r)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY and AC flags are \
cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ORA    B\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0xb1: // 10110001\\n\\t\\t\\tprintf(\\\"ORA    C\\\");\\n\\t\\t\
\\tbreak;\\n\\t\\tcase 0xb2: // 10110010\\n\\t\\t\\tprintf(\\\"ORA    D\\\");\
\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb3: // 10110011\\n\\t\\t\\tprintf(\\\"ORA   \
 E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb4: // \
10110100\\n\\t\\t\\tprintf(\\\"ORA    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xb5: // 10110101\\n\\t\\t\\tprintf(\\\"ORA    \
L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb7: // 10110111\\n\\t\\t\\tprintf(\\\
\"ORA    A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb6: // \
10110110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<OR memory>\\n\\t\\t\\t\\tORA M\\n\\t\\t\
\\t\\t\\t(A) <- (A) OR ((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY and AC flags are \
cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ORA    M\\\");\\n\\t\\t\\tbreak;\
\\n\\t\\tcase 0xf6: // 11110110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<OR immediate>\\n\
\\t\\t\\t\\tORI data\\n\\t\\t\\t\\t\\t(A) <- (A) OR (byte2)\\n\\t\\t\\t\\t\\n\
\\t\\t\\t\\tflags: Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The CY and AC flags are \
cleared.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"ORI    #0x%02x\\\", code[1]);\\n\
\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb8: // \
10111000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Compare register>\\n\\t\\t\\t\\tCMP \
r\\n\\t\\t\\t\\t\\t(A) - (r)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The Z flag is set to 1 if (A) = (r). The CY \
flag is set to 1 if (A) < (r).\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"CMP    B\\\
\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xb9: // \
10111001\\n\\t\\t\\tprintf(\\\"CMP    C\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xba: // 10111010\\n\\t\\t\\tprintf(\\\"CMP    \
D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xbb: // 10111011\\n\\t\\t\\tprintf(\\\
\"CMP    E\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xbc: // \
10111100\\n\\t\\t\\tprintf(\\\"CMP    H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xbd: // 10111101\\n\\t\\t\\tprintf(\\\"CMP    \
L\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xbf: // 10111111\\n\\t\\t\\tprintf(\\\
\"CMP    A\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xbe: // \
10111110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Compare memory>\\n\\t\\t\\t\\tCMP \
M\\n\\t\\t\\t\\t\\t(A) - ((H)(L))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The Z flag is set to 1 if (A) = ((H)(L)). The \
CY flag is set to 1 if (A) < \
((H)(L)).\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"CMP    \
M\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xfe: // \
11111110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Compare immediate>\\n\\t\\t\\t\\tCPI \
data\\n\\t\\t\\t\\t\\t(A) - (byte2)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
Z,S,P,CY,AC\\n\\t\\t\\t\\tnote: The Z flag is set to 1 if (A) = (byte2). The \
CY flag is set to 1 if (A) < (byte2).\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"CPI \
   #0x%02x\\\", code[1]);\\n\\t\\t\\topbytes = \
2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x07: // 00000111\\n\\t\\t\\t/*\\n\\t\\t\\t\
\\t<Rotate left>\\n\\t\\t\\t\\tRLC\\n\\t\\t\\t\\t\\t(A[n+1]) <- (A[n]); \
(A[0]) <- (A[7])\\n\\t\\t\\t\\t\\t(CY) <- \
(A[7])\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: \
CY\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RLC\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0x0f: // 00001111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Rotate \
right>\\n\\t\\t\\t\\tRRC\\n\\t\\t\\t\\t\\t(A[n]) <- (A[n+1]); (A[7]) <- \
(A[0])\\n\\t\\t\\t\\t\\t(CY) <- (A[0])\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: CY\
\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RRC\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x17: // 00010111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Rotate left through \
carry>\\n\\t\\t\\t\\tRAL\\n\\t\\t\\t\\t\\t(A[n+1]) <- (A[n]); (CY) <- \
(A[7])\\n\\t\\t\\t\\t\\t(A[0]) <- (CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: CY\
\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RAL\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x1f: // 00011111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Rotate right through carry>\\n\
\\t\\t\\t\\tRAR\\n\\t\\t\\t\\t\\t(A[n]) <- (A[n+1]); (CY) <- \
(A[0])\\n\\t\\t\\t\\t\\t(A[7]) <- (CY)\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tflags: CY\
\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RAR\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0x2f: // 00101111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Complement \
accumulator>\\n\\t\\t\\t\\tCMA\\n\\t\\t\\t\\t\\t(A) <- (_A_)\\n\\t\\t\\t*/\\n\
\\t\\t\\tprintf(\\\"CMA\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0x3f: // \
00111111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Complement \
carry>\\n\\t\\t\\t\\tCMC\\n\\t\\t\\t\\t\\t(CY) <- \
(_CY_)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"CMC\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0x37: // 00110111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Set \
carry>\\n\\t\\t\\t\\tSTC\\n\\t\\t\\t\\t\\t(CY) <- \
1\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"STC\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc3: // 11000011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Jump>\\n\\t\\t\\t\\tJMP \
addr\\n\\t\\t\\t\\t\\t(PC) <- (byte3)(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\
\\\"JMP    $%02x%02x\\\", code[2], code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\
\\tbreak;\\n\\t\\tcase 0xc2: // \
11000010\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Conditional \
jump>\\n\\t\\t\\t\\tJcondition addr\\n\\t\\t\\t\\t\\tIf (CCC), (PC) <- \
(byte3)(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"JNZ    $%02x%02x\\\", \
code[2], code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xca: // 11001010\\n\\t\\t\\tprintf(\\\"JZ    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd2: // \
11010010\\n\\t\\t\\tprintf(\\\"JNC    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xda: // \
11011010\\n\\t\\t\\tprintf(\\\"JC    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe2: // \
11100010\\n\\t\\t\\tprintf(\\\"JPO    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xea: // \
11101010\\n\\t\\t\\tprintf(\\\"JPE    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xf2: // \
11110010\\n\\t\\t\\tprintf(\\\"JP    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xfa: // \
11111010\\n\\t\\t\\tprintf(\\\"JM    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xcd: // \
11001101\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Call>\\n\\t\\t\\t\\tCALL \
addr\\n\\t\\t\\t\\t\\t((SP) - 1) <- (PCH)\\n\\t\\t\\t\\t\\t((SP) - 2) <- \
(PCL)\\n\\t\\t\\t\\t\\t(SP) <- (SP) - 2\\n\\t\\t\\t\\t\\t(PC) <- \
(byte3)(byte2)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"CALL   $%02x%02x\\\", \
code[2], code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xc4: // 11000100\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Conditional \
call>\\n\\t\\t\\t\\tCcondition addr\\n\\t\\t\\t\\t\\tIf (CCC), \
\\n\\t\\t\\t\\t\\t((SP) - 1) <- (PCH)\\n\\t\\t\\t\\t\\t((SP) - 2) <- (PCL)\\n\
\\t\\t\\t\\t\\t(SP) <- (SP) - 2\\n\\t\\t\\t\\t\\t(PC) <- (byte3)(byte2)\\n\\t\
\\t\\t*/\\n\\t\\t\\tprintf(\\\"CNZ    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xcc: // \
11001100\\n\\t\\t\\tprintf(\\\"CZ    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd4: // \
11010100\\n\\t\\t\\tprintf(\\\"CNC    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xdc: // \
11011100\\n\\t\\t\\tprintf(\\\"CC    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe4: // \
11100100\\n\\t\\t\\tprintf(\\\"CPO    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xec: // \
11101100\\n\\t\\t\\tprintf(\\\"CPE    $%02x%02x\\\", code[2], code[1]);\\n\\t\
\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xf4: // \
11110100\\n\\t\\t\\tprintf(\\\"CP    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xfc: // \
11111100\\n\\t\\t\\tprintf(\\\"CM    $%02x%02x\\\", code[2], \
code[1]);\\n\\t\\t\\topbytes = 3;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xc9: // \
11001001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Return>\\n\\t\\t\\t\\tRET\\n\\t\\t\\t\\\
t\\t(PCL) <- ((SP))\\n\\t\\t\\t\\t\\t(PCH) <- ((SP) + \
1)\\n\\t\\t\\t\\t\\t(SP) <- (SP) + \
2\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RET\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc0: // 11000000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Conditional \
return>\\n\\t\\t\\t\\tRcondition\\n\\t\\t\\t\\t\\tIf (CCC), \
\\n\\t\\t\\t\\t\\t(PCL) <- ((SP))\\n\\t\\t\\t\\t\\t(PCH) <- ((SP) + \
1)\\n\\t\\t\\t\\t\\t(SP) <- (SP) + \
2\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RNZ\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xc8: // \
11001000\\n\\t\\t\\tprintf(\\\"RZ\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd0: \
// 11010000\\n\\t\\t\\tprintf(\\\"RNC\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xd8: // 11011000\\n\\t\\t\\tprintf(\\\"RC\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xe0: // \
11100000\\n\\t\\t\\tprintf(\\\"RPO\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe8: \
// 11101000\\n\\t\\t\\tprintf(\\\"RPE\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xf0: // 11110000\\n\\t\\t\\tprintf(\\\"RP\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf8: // \
11111000\\n\\t\\t\\tprintf(\\\"RM\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xc7: \
// 11000111\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Restart>\\n\\t\\t\\t\\tRST \
n\\n\\t\\t\\t\\t\\t((SP) - 1) <- (PCH)\\n\\t\\t\\t\\t\\t((SP) - 2) <- \
(PCL)\\n\\t\\t\\t\\t\\t(SP) <- (SP) - 2\\n\\t\\t\\t\\t\\t(PC) <- \
8*(NNN)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"RST    \
0\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xcf: // 11001111\\n\\t\\t\\tprintf(\\\
\"RST    1\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd7: // \
11010111\\n\\t\\t\\tprintf(\\\"RST    2\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xdf: // 11011111\\n\\t\\t\\tprintf(\\\"RST    \
3\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe7: // 11100111\\n\\t\\t\\tprintf(\\\
\"RST    4\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xef: // \
11101111\\n\\t\\t\\tprintf(\\\"RST    5\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xf7: // 11110111\\n\\t\\t\\tprintf(\\\"RST    \
6\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xff: // 11111111\\n\\t\\t\\tprintf(\\\
\"RST    7\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe9: // \
11101001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Jump H and L indirect - move H and L to \
PC>\\n\\t\\t\\t\\tPCHL\\n\\t\\t\\t\\t\\t(PCH) <- (H)\\n\\t\\t\\t\\t\\t(PCL) \
<- (L)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"PCHL\\\");\\n\\t\\t\\tbreak;\\n\\t\
\\tcase 0xc5: // \
11000101\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Push>\\n\\t\\t\\t\\tPUSH rp\\n\\t\\t\\t\
\\t\\t((SP) - 1) <- (rh)\\n\\t\\t\\t\\t\\t((SP) - 2) <- \
(rl)\\n\\t\\t\\t\\t\\t(SP) <- (SP) - 2\\n\\t\\t\\t\\tnote: Register pair rp = \
SP may not be specified.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"PUSH   \
B\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd5: // 11010101\\n\\t\\t\\tprintf(\\\
\"PUSH   D\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe5: // \
11100101\\n\\t\\t\\tprintf(\\\"PUSH   H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase \
0xf5: // 11110101\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Push processor status word>\\n\
\\t\\t\\t\\tPUSH PSW\\n\\t\\t\\t\\t\\t((SP) - 1) <- \
(A)\\n\\t\\t\\t\\t\\t((SP) - 2)[0] <- (CY), ((SP) - 2)[1] <- 1\\n\\t\\t\\t\\t\
\\t((SP) - 2)[2] <- (P), ((SP) - 2)[3] <- 0\\n\\t\\t\\t\\t\\t((SP) - 2)[4] <- \
(AC), ((SP) - 2)[5] <- 0\\n\\t\\t\\t\\t\\t((SP) - 2)[6] <- (Z), ((SP) - 2)[7] \
<- (S)\\n\\t\\t\\t\\t\\t(SP) <- (SP) - \
2\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"PUSH   \
PSW\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xc1: // \
11000001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Pop>\\n\\t\\t\\t\\tPOP \
rp\\n\\t\\t\\t\\t\\t(rh) <- ((SP) + 1)\\n\\t\\t\\t\\t\\t(rl) <- ((SP) + 2)\\n\
\\t\\t\\t\\t\\t(SP) <- (SP) + 2\\n\\t\\t\\t\\tnote: Register pair rp = SP may \
not be specified.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"POP    B\\\");\\n\\t\\t\
\\tbreak;\\n\\t\\tcase 0xd1: // 11010001\\n\\t\\t\\tprintf(\\\"POP    D\\\");\
\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe1: // 11100001\\n\\t\\t\\tprintf(\\\"POP   \
 H\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xf1: // 11110001\\n\\t\\t\\t/*\\n\\t\
\\t\\t\\t<Pop processor status word>\\n\\t\\t\\t\\tPOP \
PSW\\n\\t\\t\\t\\t\\t(CY) <- ((SP))[0]\\n\\t\\t\\t\\t\\t(P) <- \
((SP))[2]\\n\\t\\t\\t\\t\\t(AC) <- ((SP))[4]\\n\\t\\t\\t\\t\\t(Z) <- \
((SP))[6]\\n\\t\\t\\t\\t\\t(S) <- ((SP))[7]\\n\\t\\t\\t\\t\\t(A) <- ((SP) + \
1)\\n\\t\\t\\t\\t\\t(SP) <- (SP) + 2\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"POP  \
  PSW\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xe3: // 11100011\\n\\t\\t\\t/*\\n\
\\t\\t\\t\\t<Exchange stack top with H and \
L>\\n\\t\\t\\t\\tXTHL\\n\\t\\t\\t\\t\\t(L) <-> ((SP))\\n\\t\\t\\t\\t\\t(H) \
<-> ((SP) + \
1)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"XTHL\\\");\\n\\t\\t\\tbreak;\\n\\t\\\
tcase 0xf9: // 11111001\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Move HL to \
SP>\\n\\t\\t\\t\\tSPHL\\n\\t\\t\\t\\t\\t(SP) <- (H)(L)\\n\\t\\t\\t*/\\n\\t\\t\
\\tprintf(\\\"SPHL\\\");\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xdb: // \
11011011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Input>\\n\\t\\t\\t\\tIN \
port\\n\\t\\t\\t\\t\\t(A) <- (data)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"IN    \
 #0x%02x\\\", code[1]);\\n\\t\\t\\topbytes = \
2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xd3: // 11010011\\n\\t\\t\\t/*\\n\\t\\t\\t\
\\t<Output>\\n\\t\\t\\t\\tOUT port\\n\\t\\t\\t\\t\\t(data) <- \
(A)\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"OUT    #0x%02x\\\", \
code[1]);\\n\\t\\t\\topbytes = 2;\\n\\t\\t\\tbreak;\\n\\t\\tcase 0xfb: // \
11111011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Enable \
interrupts>\\n\\t\\t\\t\\tEI\\n\\t\\t\\t\\tnote: The interrupt system is \
enabled following the execution of the next \
instruction.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"EI\\\");\\n\\t\\t\\tbreak;\\\
n\\t\\tcase 0xf3: // 11110011\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Disable \
interrupts>\\n\\t\\t\\t\\tDI\\n\\t\\t\\t\\tnote: The interrupt system is \
disabled immediately following the execution of the DI \
instruction.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"DI\\\");\\n\\t\\t\\tbreak;\\\
n\\t\\tcase 0x76: // \
01110110\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<Halt>\\n\\t\\t\\t\\tHLT\\n\\t\\t\\t\\\
tnote: The processor is stopped. The registers and flags are \
unnafected.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"HLT\\\");\\n\\t\\t\\tbreak;\\\
n\\t\\tcase 0x00: // 00000000\\n\\t\\t\\t/*\\n\\t\\t\\t\\t<No op>\\n\\t\\t\\t\
\\tNOP\\n\\t\\t\\t\\tnote: No operation is performed. The registers and flags \
are unnafected.\\n\\t\\t\\t*/\\n\\t\\t\\tprintf(\\\"NOP\\\");\\n\\t\\t\\\
tbreak;\\n\\t\\tcase 0x08: // 00001000\\n\\t\\tcase 0x10: // \
00010000\\n\\t\\tcase 0x18: // 00011000\\n\\t\\tcase 0x20: // \
00100000\\n\\t\\tcase 0x28: // 00101000\\n\\t\\tcase 0x30: // \
00110000\\n\\t\\tcase 0x38: // 00111000\\n\\t\\tcase 0xcb: // \
11001011\\n\\t\\tcase 0xd9: // 11011001\\n\\t\\tcase 0xdd: // \
11011101\\n\\t\\tcase 0xed: // 11101101\\n\\t\\tcase 0xfd: // 11111101\"\>"], \
"Output",
 CellChangeTimes->{{3.785436239407366*^9, 3.7854362627239933`*^9}, 
   3.785436306014975*^9, {3.785436931062055*^9, 3.785436947837476*^9}, 
   3.7854370438867607`*^9, 3.7854371755633593`*^9, {3.785437223560893*^9, 
   3.785437274207712*^9}, 3.785437368345944*^9, 3.785437578600347*^9, 
   3.785438503279881*^9, 3.78543858837258*^9, {3.785438741161331*^9, 
   3.785438763898652*^9}, 3.785439059075039*^9, 3.7854391448260393`*^9, {
   3.785439195922675*^9, 3.785439210025146*^9}, 3.785439368336093*^9, 
   3.785439529408546*^9, 3.785439632017099*^9, 3.7854398158845253`*^9, {
   3.785440038291342*^9, 3.785440043032258*^9}, 3.7854400776314297`*^9, 
   3.785440212336151*^9, 3.785440293873027*^9, 3.785440363810402*^9, 
   3.785440441457327*^9, 3.785440525478479*^9, 3.785440587443952*^9, 
   3.78544072737796*^9, 3.785440852687779*^9, {3.78544097372869*^9, 
   3.785440979975399*^9}, 3.7854411513351307`*^9, 3.7854412074866467`*^9, 
   3.785441330123981*^9, {3.785446026837513*^9, 3.785446052507695*^9}, {
   3.785446137151432*^9, 3.785446259879541*^9}, 3.785446290758349*^9, 
   3.785446595538125*^9, 3.785446684836767*^9, 3.785446809721386*^9, 
   3.785446992623144*^9, 3.785447072041074*^9, 3.785447145955894*^9, 
   3.785447299905102*^9, 3.785447396967998*^9, 3.7854474597048492`*^9, 
   3.7854476500448437`*^9, 3.7854477648492193`*^9, 3.785447850200144*^9, 
   3.785448060287672*^9, 3.785448169116633*^9, 3.78544827737512*^9, 
   3.785448389906682*^9, 3.78544850273584*^9, 3.785448595217552*^9, 
   3.785448687026754*^9, {3.785449445088244*^9, 3.785449468894546*^9}, 
   3.785449643551849*^9, 3.7854498604750633`*^9, {3.7854500020018806`*^9, 
   3.7854500213310747`*^9}, 3.7854502076890163`*^9, 3.785450350238241*^9, 
   3.785450583143506*^9, 3.785450680108239*^9, 3.785450959359522*^9, 
   3.7854511082976303`*^9, 3.7854513782580976`*^9, 3.7854516107586803`*^9, 
   3.785452212879376*^9, 3.785452357299288*^9, 3.785452526584577*^9, 
   3.7854526027239847`*^9, 3.785452685407775*^9, 3.7854527313889923`*^9, 
   3.7854527963131313`*^9, 3.78545284935107*^9, 3.785452927619315*^9, 
   3.785453135028294*^9, 3.7854531848364487`*^9, 3.7854532453085613`*^9, {
   3.785453390513101*^9, 3.7854534238414383`*^9}, 3.785453470001524*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"7b8c3a10-7a4e-4291-87b8-83a4c2452c35"]
}, Open  ]],

Cell[BoxData["\t"], "Input",
 CellChangeTimes->{
  3.785436357364933*^9},ExpressionUUID->"3fda54b0-0ea6-4c66-8c82-\
5b909d340b4e"]
},
WindowSize->{1860, 1000},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 1003, 22, 155, "Input",ExpressionUUID->"fc6ff9ce-51e3-4537-8110-c903f790af52"],
Cell[1589, 46, 22595, 388, 26923, "Output",ExpressionUUID->"46609712-b4cf-4657-9923-ed981f1e67f5"]
}, Closed]],
Cell[24199, 437, 1236, 38, 347, "Input",ExpressionUUID->"cdb41e9b-91e2-4c62-bfcd-22d0c63c67f5"],
Cell[25438, 477, 801, 23, 216, "Input",ExpressionUUID->"3a196786-83bf-44af-b936-a12e21cdc1d6"],
Cell[26242, 502, 1300, 40, 356, "Input",ExpressionUUID->"d0f225eb-44fd-4a6e-a097-5b64091d9d86"],
Cell[CellGroupData[{
Cell[27567, 546, 333, 8, 49, "Input",ExpressionUUID->"284d256e-2c2f-4f3b-94b4-07f13e82a282"],
Cell[27903, 556, 183, 2, 55, "Output",ExpressionUUID->"30a570b0-1a52-49e2-9421-e82f5771c7dd"]
}, Open  ]],
Cell[28101, 561, 104973, 2639, 21601, "Input",ExpressionUUID->"83d568c8-fa63-45ad-b753-ae44920f4ad6"],
Cell[CellGroupData[{
Cell[133099, 3204, 1981, 32, 49, "Input",ExpressionUUID->"0487e8f3-556f-4734-9ca2-98566d8f7e17"],
Cell[135083, 3238, 1649, 24, 55, "Output",ExpressionUUID->"33e4fca8-0b69-417f-9689-d7cbb77a6517"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136769, 3267, 428, 10, 49, "Input",ExpressionUUID->"eb2f7428-504b-4a17-952a-fa4a9f0e6540"],
Cell[137200, 3279, 878, 19, 91, "Output",ExpressionUUID->"c4eb6a94-dbdc-4890-b9e2-8db914e433bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138115, 3303, 9708, 185, 903, "Input",ExpressionUUID->"1c9324da-1d6d-4a12-a862-1463a88cad52"],
Cell[147826, 3490, 40280, 611, 44703, "Output",ExpressionUUID->"7b8c3a10-7a4e-4291-87b8-83a4c2452c35"]
}, Open  ]],
Cell[188121, 4104, 130, 3, 48, "Input",ExpressionUUID->"3fda54b0-0ea6-4c66-8c82-5b909d340b4e"]
}
]
*)

